# -*- coding: utf-8 -*-
"""CredScore_Prj.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P3Bdf7dF1vPESqKbcIqxDWn_eziCxuFM

# Data-Exploration
"""

# importing necessary libs
import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.linear_model import LogisticRegression

from google.colab import drive
drive.mount('/content/drive')

# loading dataset from drive
df = pd.read_excel('/content/drive/My Drive/credit_scoring/CreditScoring.xlsx')

# dimensions of dataset
df.shape

# initial data
df.head(10)

df.drop('ID', axis=1, inplace=True)
df.shape

"""*We removed the "ID" feature since it will not affect our models performance in any way. Furthermore the ID is not required to determine if the loan will turn out to be good or bad.*"""

df.isna().sum()

df = df.fillna(df.mean())

df.isna().sum()

"""*No missing values left in CreditScoring*"""

# counting good & bad loans
df.TARGET.value_counts()

# summary about 0 and 1
df.groupby('TARGET').mean()

"""# Train-Test Split"""

y = df.iloc[:,0].values
x = df.iloc[:,1:28].values

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state = 0)

# Scaling the data
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

"""# Model-Building"""

classifier = LogisticRegression()
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)

"""# Model-Performance"""

print(confusion_matrix(y_test, y_pred))

print(accuracy_score(y_test, y_pred))

"""We have 82.83% accuracy score - indicating model is performing good"""

preds = classifier.predict_proba(x_test)
preds

"""# Writing-Files"""

df_preds_prob = pd.DataFrame(preds, columns = ['prob_0','prob_1'])
df_preds_target = pd.DataFrame(classifier.predict(x_test), columns = ['pred_target'])
df_test_data = pd.DataFrame(y_test, columns = ['ActualOutcome'])

dfx = pd.concat([df_test_data, df_preds_prob, df_preds_target], axis=1)
dfx.to_csv('/content/drive/My Drive/credit_scoring/model_pred_01.xlsx', sep = ',', encoding='UTF-8')
dfx.head()

# @title pred_target

from matplotlib import pyplot as plt
dfx['pred_target'].plot(kind='hist', bins=20, title='pred_target')
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title ActualOutcome

from matplotlib import pyplot as plt
dfx['ActualOutcome'].plot(kind='hist', bins=20, title='ActualOutcome')
plt.gca().spines[['top', 'right',]].set_visible(False)

dfx['ActualOutcome'].value_counts()

dfx['pred_target'].value_counts()

